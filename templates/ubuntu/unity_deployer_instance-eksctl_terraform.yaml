AWSTemplateFormatVersion: "2010-09-09"

Description: Deploy an EC2 instance into an existing VPC for deployment of Unity

Metadata:
  QuickStartDocumentation:
    EntrypointName: Launch into an existing VPC

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Basic configuration
        Parameters:
          - VPCID
          - PublicSubnetID
          - KeyPairName
          - InstanceType
          - PrivilegedPolicyName
    ParameterLabels:
      VPCID:
        default: VPC ID
      PublicSubnetID:
        default: Public subnet ID
      KeyPairName:
        default: SSH key name
      InstanceType:
        default: EC2 instance type
      PrivilegedPolicyName:
        default: Privileged (admin-level) IAM policy name

Parameters:
  VPCID:
    Description: ID of your existing VPC (e.g., vpc-0343606e).
    Type: AWS::EC2::VPC::Id

  PublicSubnetID:
    Description: ID of the public subnet in an Availability Zone of your existing VPC (e.g., subnet-fe9a8b32).
    Type: AWS::EC2::Subnet::Id

  KeyPairName:
    Description: Name of an existing key pair, which allows you to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
      - c3.xlarge
      - c4.xlarge
      - c5.xlarge
      - c6i.xlarge
    Default: c6i.xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  PrivilegedPolicyName:
    Description: Name of an existing IAM policy which allows privileged access to AWS services.
    Type: String
    Default: mcp-tenantOperator-AMI-APIG

Mappings:
  AWSRegion2AMI:
    us-east-1:
      HVM64: ami-07d55409a574e8ac4
    us-east-2:
      HVM64: ami-09e83873e3915890f
    us-west-1:
      HVM64: ami-00c0e31993353432c
    us-west-2:
      HVM64: ami-0291bdfdc140275bf

Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}"

  RandomStringLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt LambdaExecutionRole.Arn
      MemorySize: 128
      Timeout: 20
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import random
          import string
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          
          def get_random_string(event, context):
              random_string = "".join(
                  random.choice(string.ascii_lowercase + string.digits)
                  for i in range(int(event["ResourceProperties"]["Length"]))
              )
              logger.info("Random string generated: %s", random_string)
              return random_string
          
          
          def handler(event, context):
              response_data = dict()
              try:
                  response_data["RandomString"] = get_random_string(event, context)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  logger.error(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

  RandomStringResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 5
      ServiceToken: !GetAtt RandomStringLambdaFunction.Arn

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        # TODO: need to generalize for JPL, MCP and normal AWS accounts; currently these are specific to MCP
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/DatalakeKinesisPolicy"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/McpToolsAccessPolicy"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  DeployerInstance:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deployer_install:
            - install_cfn
            - install_deployer_tools
            - create_eks_cluster
            - deploy_sps
            - deploy_unity-on-demand-api
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: "000400"
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DeployerInstance.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource DeployerInstance --configsets deployer_install --region ${AWS::Region}
                runas=root
              group: root
              mode: "000400"
              owner: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
          services:
            systemd:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                  - /lib/systemd/system/cfn-hup.service
        install_deployer_tools:
          files:
            /home/ubuntu/.bash_profile:
              content: !Sub |
                # .bash_profile
                
                # Get the aliases and functions
                if [ -f ~/.bashrc ]; then
                        . ~/.bashrc
                fi
                
                # User specific environment and startup programs
                
                PATH=$HOME/.local/bin:$HOME/bin:/usr/local/bin:$PATH
                
                export PATH
              group: ubuntu
              mode: "000644"
              owner: ubuntu
          packages:
            yum:
              docker.io: []
              git: []
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
          commands:
            01_install_eksctl:
              command: !Sub |
                set -ex \
                && echo "running 01_install_eksctl" \
                && curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp \
                && mv /tmp/eksctl /usr/local/bin \
                && chmod +x /usr/local/bin/eksctl \
                && ln -s /usr/local/bin/eksctl /bin/eksctl
            02_install_kubectl:
              # TODO: install the version of kubectl that matches the k8s server version specified above
              command: !Sub |
                set -ex \
                && echo "running 02_install_kubectl" \
                && curl --silent -o /tmp/kubectl https://s3.${AWS::Region}.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl \
                && mv /tmp/kubectl /usr/local/bin \
                && chmod +x /usr/local/bin/kubectl \
                && ln -s /usr/local/bin/kubectl /bin/kubectl
            03_docker_for_user:
              command: !Sub |
                set -ex \
                && echo "running 03_docker_for_user" \
                && usermod -a -G docker ubuntu
            04_install_tfenv:
              command: !Sub |
                set -ex \
                && echo "running 04_install_tfenv" \
                && git clone --depth=1 https://github.com/tfutils/tfenv.git /home/ubuntu/.tfenv \
                && chown -R ubuntu:ubuntu /home/ubuntu/.tfenv \
                && ln -s /home/ubuntu/.tfenv/bin/* /usr/local/bin
            05_clone_unity_sps_repo:
              command: !Sub |
                set -ex \
                && echo "running 05_clone_unity_sps_repo" \
                && git clone https://github.com/unity-sds/unity-sps-prototype.git /home/ubuntu/unity-sps-prototype \
                && chown -R ubuntu:ubuntu /home/ubuntu/unity-sps-prototype
            06_install_awscli:
              command: !Sub |
                set -ex \
                && echo "running 06_install_awscli" \
                && pip3 install -U awscli \
                && ln -s /usr/local/bin/aws /bin/aws
            07_install_conda:
              command: !Sub |
                set -ex \
                && echo "running 07_install_conda" \
                && curl -sSL https://repo.anaconda.com/miniconda/Miniconda3-py39_22.11.1-1-Linux-x86_64.sh -o /tmp/install_miniconda.sh \
                && chmod 755 /tmp/install_miniconda.sh \
                && bash /tmp/install_miniconda.sh -b -p /usr/local -u
            08_install_serverless:
              command: !Sub |
                set -ex \
                && echo "running 08_install_serverless" \
                && curl -sSL https://nodejs.org/dist/v16.20.0/node-v16.20.0-linux-x64.tar.gz -o /tmp/node-v16.20.0-linux-x64.tar.gz \
                && tar xvfz /tmp/node-v16.20.0-linux-x64.tar.gz -C /usr/local \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/node /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/corepack /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/npx /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/npm /usr/local/bin/ \
                && npm install -g serverless \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/serverless /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/sls /usr/local/bin/
        create_eks_cluster:
          files:
            /home/ubuntu/eksctl-config.yaml:
              content: !Sub |
                apiVersion: eksctl.io/v1alpha5
                kind: ClusterConfig
                
                iam:
                  serviceRoleARN:
                  serviceRolePermissionsBoundary: arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}
                  withOIDC: false
                
                metadata:
                  # TODO: make this a parameter
                  name: unity-sps-on-demand-${RandomStringResource.RandomString}
                  region: ${AWS::Region}
                  # TODO: make this a parameter
                  version: "1.24"
                  tags:
                    # TODO: make these parameters
                    service: "nisar"
                    project: "nisar"
                
                vpc:
                  subnets:
                    private:
                      # TODO: make these parameters
                      us-west-2b: { id: subnet-092597c48cfec3f04 }
                      #us-west-2c: { id: subnet-0ba7d45fe29659a2a }
                      us-west-2d: { id: subnet-0e4ff7f670ebb4cc3 }
                    public:
                      # TODO: make these parameters
                      us-west-2b: { id: subnet-0ebdd997cc3ebe58d }
                      #us-west-2c: { id: subnet-087b54673c7549e2d }
                      us-west-2d: { id: subnet-009c32904a8bf3b92 }
                  securityGroup:
                  sharedNodeSecurityGroup:
                  manageSharedNodeSecurityGroupRules: true
                
                managedNodeGroups:
                  - name: defaultgroupNodeGroup
                    minSize: 1
                    maxSize: 2
                    desiredCapacity: 1
                    # TODO: make this a parameter
                    instanceType: m6i.xlarge
                    ami: ami-0886544fa915698f0
                    amiFamily: AmazonLinux2
                    spot: false
                    tags:
                      # TODO: make these parameters
                      service: "nisar"
                      project: "nisar"
                    iam:
                      attachPolicyARNs:
                        - arn:aws:iam::${AWS::AccountId}:policy/DatalakeKinesisPolicy
                        - arn:aws:iam::${AWS::AccountId}:policy/McpToolsAccessPolicy
                        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                        - arn:aws:iam::aws:policy/AmazonS3FullAccess
                        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
                        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
                        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
                        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
                      instanceRoleARN:
                      instanceRolePermissionsBoundary: arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}
                      withAddonPolicies:
                        autoScaler: true
                    privateNetworking: true
                    overrideBootstrapCommand: |
                      #!/bin/bash
                      /etc/eks/bootstrap.sh unity-sps-on-demand-${RandomStringResource.RandomString}
              group: ubuntu
              mode: '000644'
              owner: ubuntu
          commands:
            01_create_cluster:
              command: !Sub |
                set -ex \
                && echo "running 01_create_cluster" \
                && sudo -i -u ubuntu eksctl create cluster -f eksctl-config.yaml
              cwd: /home/ubuntu
            02_configure_cluster:
              command: !Sub |
                set -ex \
                && echo "running 02_configure_cluster" \
                && sudo -i -u ubuntu aws eks update-kubeconfig --region ${AWS::Region} --name unity-sps-on-demand-${RandomStringResource.RandomString} \
                && sudo -i -u ubuntu kubectl set env daemonset -n kube-system aws-node AWS_VPC_K8S_CNI_EXTERNALSNAT=true \
                && sudo -i -u ubuntu eksctl create iamidentitymapping --cluster unity-sps-on-demand-${RandomStringResource.RandomString} --region=${AWS::Region} --arn arn:aws:iam::${AWS::AccountId}:role/mcp-tenantDeveloper --group system:masters --username admin \
                && sudo -i -u ubuntu eksctl create iamidentitymapping --cluster unity-sps-on-demand-${RandomStringResource.RandomString} --region=${AWS::Region} --arn arn:aws:iam::${AWS::AccountId}:role/mcp-tenantOperator --group system:masters --username admin \
                && sudo -i -u ubuntu kubectl apply -k "github.com/kubernetes-sigs/aws-ebs-csi-driver/deploy/kubernetes/overlays/stable/?ref=release-1.18"
              cwd: /home/ubuntu
        deploy_sps:
          files:
            /home/ubuntu/unity-sps-prototype/terraform-unity/terraform.tfvars:
              content: !Sub |
                celeryconfig_filename                         = "celeryconfig_remote.py"
                container_registry_owner                      = "unity-sds/unity-sps-prototype"
                container_registry_server                     = "ghcr.io"
                container_registry_username                   = "gmanipon"
                counter                                       = "${RandomStringResource.RandomString}"
                datasets_filename                             = "datasets.remote.template.json"
                default_group_node_group_launch_template_name = "eksctl-unity-sps-on-demand-${RandomStringResource.RandomString}-nodegroup-defaultgroupNodeGroup"
                default_group_node_group_name                 = "defaultgroupNodeGroup"
                docker_images = {
                  "ades_wpst_api" : "ghcr.io/unity-sds/unity-sps-prototype/ades-wpst-api:unity-v1.0.0",
                  "busybox" : "busybox:1.36.0",
                  "dind" : "docker:23.0.3-dind",
                  "hysds_core" : "ghcr.io/unity-sds/unity-sps-prototype/hysds-core:unity-v1.0.0",
                  "hysds_factotum" : "ghcr.io/unity-sds/unity-sps-prototype/hysds-factotum:unity-v1.0.0",
                  "hysds_grq2" : "ghcr.io/unity-sds/unity-sps-prototype/hysds-grq2:unity-v1.0.0",
                  "hysds_mozart" : "ghcr.io/unity-sds/unity-sps-prototype/hysds-mozart:unity-v1.0.0",
                  "hysds_ui" : "ghcr.io/unity-sds/unity-sps-prototype/hysds-ui-remote:unity-v1.0.0",
                  "hysds_verdi" : "ghcr.io/unity-sds/unity-sps-prototype/hysds-verdi:unity-v1.0.0",
                  "logstash" : "docker.elastic.co/logstash/logstash:7.10.2",
                  "rabbitmq" : "rabbitmq:3.11.13-management",
                  "redis" : "redis:7.0.10",
                  "sps_api" : "ghcr.io/unity-sds/unity-sps-prototype/sps-api:unity-v1.0.0",
                  "sps_hysds_pge_base" : "ghcr.io/unity-sds/unity-sps-prototype/sps-hysds-pge-base:unity-v1.0.0"
                }
                eks_cluster_name    = "unity-sps-on-demand-${RandomStringResource.RandomString}"
                elb_subnet          = "subnet-087b54673c7549e2d"
                kubeconfig_filepath = "~/.kube/config"
                namespace           = "unity-sps"
                project             = "nisar"
                region              = "us-west-2"
                release             = "23.1"
                service_area        = "sps"
                service_port_map = {
                  "ades_wpst_api_service" : 5001,
                  "grq2_es" : 9201,
                  "grq2_service" : 8878,
                  "hysds_ui_service" : 3000,
                  "mozart_es" : 9200,
                  "mozart_service" : 8888,
                  "rabbitmq_mgmt_service_cluster_rpc" : 15672,
                  "rabbitmq_service_cluster_rpc" : 15672,
                  "rabbitmq_service_epmd" : 4369,
                  "rabbitmq_service_listener" : 5672,
                  "redis_service" : 6379,
                  "sps_api_service" : 5002
                }
                service_type                   = "LoadBalancer"
                uads_development_efs_fsmt_id   = "fsmt-06d161d46a1b16cb6"
                venue                          = "dev"
                verdi_node_group_capacity_type = "ON_DEMAND"
                verdi_node_group_instance_types = [
                  "m3.medium"
                ]
                verdi_node_group_scaling_config = {
                  "desired_size" : 3,
                  "max_size" : 10,
                  "min_size" : 0
                }
              group: ubuntu
              mode: '000644'
              owner: ubuntu
          commands:
            01_terraform_init:
              command: !Sub |
                set -ex \
                && echo "running 01_terraform_init" \
                && sudo -i -u ubuntu tfenv install \
                && sudo -u ubuntu /usr/local/bin/terraform init
              cwd: /home/ubuntu/unity-sps-prototype/terraform-unity
            # NOTE: no longer needed since gp2 should be default but left here as an example;
            # create gp2-sps storageclass and set as default first to avoid race conditions (2 defaults)
            #02_terraform_apply_gp2-sps:
            #  command: !Sub |
            #    set -ex \
            #    && echo "running 02_terraform_apply_gp2-sps" \
            #    && sudo -u ubuntu /usr/local/bin/terraform apply -target=module.unity-sps-hysds-cluster.kubernetes_storage_class.gp2-sps -target=module.unity-sps-hysds-cluster.null_resource.unset_default -auto-approve
            #  cwd: /home/ubuntu/unity-sps-prototype/terraform-unity
            03_terraform_apply:
              command: !Sub |
                set -ex \
                && echo "running 03_terraform_apply" \
                && sudo -u ubuntu /usr/local/bin/terraform apply --auto-approve \
                && sudo -u ubuntu /usr/local/bin/terraform output | grep sps_api | awk 'BEGIN{FS="\""}{print "export sps_api="$4}' > sps_api.sh
              cwd: /home/ubuntu/unity-sps-prototype/terraform-unity
        deploy_unity-on-demand-api:
          commands:
            01_clone_repo:
              command: !Sub |
                set -ex \
                && echo "running 01_clone_repo" \
                && git clone https://github.com/unity-sds/unity-on-demand-api.git /home/ubuntu/unity-on-demand-api \
                && chown -R ubuntu:ubuntu /home/ubuntu/unity-on-demand-api
              cwd: /home/ubuntu
            02_run_serverless_deploy:
              command: !Sub |
                set -ex \
                && echo "running 02_run_serverless_deploy" \
                && sudo -i -u ubuntu bash -c "cd ~/unity-on-demand-api \
                   && serverless plugin install -n serverless-python-requirements \
                   && serverless plugin install -n serverless-wsgi \
                   && source ~/unity-sps-prototype/terraform-unity/sps_api.sh \
                   && serverless deploy --param cluster_name=unity-sps-on-demand-${RandomStringResource.RandomString} \
                                        --param sps_api_url=http://${!sps_api}:5002 \
                                        --param permissionsBoundaryPolicyName=${PrivilegedPolicyName} \
                                        --region ${AWS::Region} \
                                        --stage ${RandomStringResource.RandomString}"
              cwd: /home/ubuntu/unity-on-demand-api
    Properties:
      ImageId: !FindInMap [AWSRegion2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetID
      EbsOptimized: true
      SecurityGroupIds:
        - !Ref DeployerSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: !Sub "unity-deployer-instance-${RandomStringResource.RandomString}"
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          sudo apt-get -y -o DPkg::Lock::Timeout=-1 update
          sudo apt-get -y -o DPkg::Lock::Timeout=-1 install python3-pip
          mkdir -p /opt/aws/
          sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          sudo ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource DeployerInstance --configsets deployer_install --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource DeployerInstance --region ${AWS::Region}

  DeployerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for unity-deployer-instance
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
