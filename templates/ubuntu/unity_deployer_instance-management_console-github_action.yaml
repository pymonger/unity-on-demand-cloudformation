AWSTemplateFormatVersion: "2010-09-09"

Description: Deploy an EC2 instance into an existing VPC for deployment of Unity

Metadata:
  QuickStartDocumentation:
    EntrypointName: Launch into an existing VPC

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Basic configuration
        Parameters:
          - VPCID
          - PublicSubnetID
          - KeyPairName
          - InstanceType
          - PrivilegedPolicyName
          - LambdaExecutionRoleARN
          - UnityAppsToBootstap
          - GithubToken
          - Venue
          - Proj
    ParameterLabels:
      VPCID:
        default: VPC ID
      PublicSubnetID:
        default: Public subnet ID
      KeyPairName:
        default: SSH key name
      InstanceType:
        default: EC2 instance type
      PrivilegedPolicyName:
        default: Privileged (admin-level) IAM policy name
      LambdaExecutionRoleARN:
        default: Lambda execution role ARN
      UnityAppsToBootstap:
        default: Unity services to deploy by default
      GithubToken:
        default: Github token with repo:read access
      Venue:
        default: Venue that the resource is being deployed on
      Proj:
        default: Unity project

Parameters:
  VPCID:
    Description: ID of your existing VPC (e.g., vpc-0343606e).
    Type: AWS::EC2::VPC::Id

  PublicSubnetID:
    Description: ID of the public subnet in an Availability Zone of your existing VPC (e.g., subnet-fe9a8b32).
    Type: AWS::EC2::Subnet::Id

  KeyPairName:
    Description: Name of an existing key pair, which allows you to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
      - c3.xlarge
      - c4.xlarge
      - c5.xlarge
      - c6i.xlarge
    Default: c6i.xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  PrivilegedPolicyName:
    Description: Name of an existing IAM policy which allows privileged access to AWS services.
    Type: String
    Default: mcp-tenantOperator-AMI-APIG

  LambdaExecutionRoleARN:
    Description: ARN for the IAM role which allows for Lambda execution.
    Type: String
    Default: arn:aws:iam::237868187491:role/MCP-ConfigLambdaExecutionRole-us-west-2
 
  InstanceRoleARN:
    Description: ARN for the IAM role which allows for Instance .
    Type: String
    Default: arn:aws:iam::237868187491:role/MCP-ConfigLambdaExecutionRole-us-west-2

  OIDCRoleARN:
    Description: ARN for the IAM role which allows for OIDC Permissions.
    Type: String
    Default: arn:aws:iam::237868187491:role/mcp-Unity-Github-OIDC-Role

  UnityAppsToBootstap:
    Description: Unity services to deploy
    Type: String
    AllowedValues:
      - test
      - sps
      - ads (not implemented)
      - as (not implemented)
    Default: test
    ConstraintDescription: must be a valid Unity service

  GithubToken:
    NoEcho: true
    Description: Github token with repo:read access
    Type: String

  Venue:
    Description: Venue that the resource is being deployed on (e.g., Dev, Test, SIPS-test)
    Type: String
    Default: Dev

  Proj:
    Description: Unity Project (e.g., sips or unity)
    Type: String
    Default: unity

Mappings:
  AWSRegion2AMI:
    us-east-1:
      HVM64: ami-07d55409a574e8ac4
    us-east-2:
      HVM64: ami-09e83873e3915890f
    us-west-1:
      HVM64: ami-00c0e31993353432c
    us-west-2:
      HVM64: ami-0291bdfdc140275bf

Resources:

  RandomStringLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: python3.8
      Role: !Ref OIDCRoleARN
      MemorySize: 128
      Timeout: 20
      Code:
        ZipFile: |
          import cfnresponse
          import logging
          import random
          import string
          
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          
          
          def get_random_string(event, context):
              random_string = "".join(
                  random.choice(string.ascii_lowercase + string.digits)
                  for i in range(int(event["ResourceProperties"]["Length"]))
              )
              logger.info("Random string generated: %s", random_string)
              return random_string
          
          
          def handler(event, context):
              response_data = dict()
              try:
                  response_data["RandomString"] = get_random_string(event, context)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  logger.error(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

  RandomStringResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 5
      ServiceToken: !GetAtt RandomStringLambdaFunction.Arn

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRoleARN

  DeployerInstance:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deployer_install:
            - install_cfn
            - install_deployer_tools
            - deploy_management_console
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: "000400"
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DeployerInstance.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init -v --stack ${AWS::StackName} --resource DeployerInstance --configsets deployer_install --region ${AWS::Region} --url https://stackbuilder.amazonaws.com
                runas=root
              group: root
              mode: "000400"
              owner: root
            /lib/systemd/system/cfn-hup.service:
              content: !Sub |
                [Unit]
                Description=cfn-hup daemon

                [Service]
                Type=simple
                ExecStart=/usr/local/bin/cfn-hup
                Restart=always

                [Install]
                WantedBy=multi-user.target
          services:
            systemd:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
                  - /lib/systemd/system/cfn-hup.service
        install_deployer_tools:
          files:
            /home/ubuntu/.bash_profile:
              content: !Sub |
                # .bash_profile
                
                # Get the aliases and functions
                if [ -f ~/.bashrc ]; then
                        . ~/.bashrc
                fi
                
                # User specific environment and startup programs
                
                PATH=$HOME/.local/bin:$HOME/bin:/usr/local/bin:$PATH
                
                export PATH
              group: ubuntu
              mode: "000644"
              owner: ubuntu
          packages:
            apt:
              docker.io: []
              git: []
          services:
            systemd:
              docker:
                enabled: true
                ensureRunning: true
          commands:
            01_install_eksctl:
              command: !Sub |
                set -ex \
                && echo "running 01_install_eksctl" \
                && curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp \
                && mv /tmp/eksctl /usr/local/bin \
                && chmod +x /usr/local/bin/eksctl \
                && ln -s /usr/local/bin/eksctl /bin/eksctl
            02_install_kubectl:
              # TODO: install the version of kubectl that matches the k8s server version specified above
              command: !Sub |
                set -ex \
                && echo "running 02_install_kubectl" \
                && curl --silent -o /tmp/kubectl https://s3.${AWS::Region}.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl \
                && mv /tmp/kubectl /usr/local/bin \
                && chmod +x /usr/local/bin/kubectl \
                && ln -s /usr/local/bin/kubectl /bin/kubectl
            03_docker_for_user:
              command: !Sub |
                set -ex \
                && echo "running 03_docker_for_user" \
                && usermod -a -G docker ubuntu
            04_install_tfenv:
              command: !Sub |
                set -ex \
                && echo "running 04_install_tfenv" \
                && git clone --depth=1 https://github.com/tfutils/tfenv.git /home/ubuntu/.tfenv \
                && chown -R ubuntu:ubuntu /home/ubuntu/.tfenv \
                && ln -s /home/ubuntu/.tfenv/bin/* /usr/local/bin
            05_install_awscli:
              command: !Sub |
                set -ex \
                && echo "running 05_install_awscli" \
                && pip3 install -U awscli \
                && ln -s /usr/local/bin/aws /bin/aws
            06_install_conda:
              command: !Sub |
                set -ex \
                && echo "running 06_install_conda" \
                && curl -sSL https://repo.anaconda.com/miniconda/Miniconda3-py39_22.11.1-1-Linux-x86_64.sh -o /tmp/install_miniconda.sh \
                && chmod 755 /tmp/install_miniconda.sh \
                && bash /tmp/install_miniconda.sh -b -p /usr/local -u
            07_install_serverless:
              command: !Sub |
                set -ex \
                && echo "running 07_install_serverless" \
                && curl -sSL https://nodejs.org/dist/v16.20.0/node-v16.20.0-linux-x64.tar.gz -o /tmp/node-v16.20.0-linux-x64.tar.gz \
                && tar xvfz /tmp/node-v16.20.0-linux-x64.tar.gz -C /usr/local \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/node /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/corepack /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/npx /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/npm /usr/local/bin/ \
                && npm install -g serverless \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/serverless /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/sls /usr/local/bin/
            08_create_unity_config_directory:
              command: !Sub |
                set -ex \
                && echo "running 08_create_unity_config_directory" \
                && mkdir /home/ubuntu/.unity \
                && chown -R ubuntu:ubuntu /home/ubuntu/.unity
        deploy_management_console:
          files:
            /home/ubuntu/.unity/unity.yaml:
              content: !Sub |
                GithubToken: ${GithubToken}
                WorkflowBasePath: /home/ubuntu/management-console/workflowresources/.github/workflows
                Workdir: /home/ubuntu/management-console/workflowresources/
              group: ubuntu
              mode: "000644"
              owner: ubuntu
          commands:
            01_install_management_console:
              command: !Sub |
                set -ex \
                && echo "running 01_install_management_console" \
                && sudo -i -u ubuntu wget -q -O managementconsole.zip "https://github.com/unity-sds/unity-management-console/releases/download/0.2.9/managementconsole.zip" \
                && sudo -i -u ubuntu unzip managementconsole.zip
              cwd: /home/ubuntu
            02_run_management_console:
              command: !Sub |
                set -ex \
                && echo "running 02_run_management_console" \
                && sudo -u ubuntu ./main webapp > /var/log/management-console.log 2>&1 &
              cwd: /home/ubuntu/management-console
    Properties:
      ImageId: !FindInMap [AWSRegion2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetID
      EbsOptimized: true
      SecurityGroupIds:
        - !Ref DeployerSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Venue
          Value: !Ref Venue
        - Key: ServiceArea
          Value: cs
        - Key: CapVersion
          Value: 23.2
        - Key: Component
          Value: Unity Management Console
        - Key: Name
          Value: Unity Management Console
        - Key: Proj
          Value: !Ref Proj
        - Key: CreatedBy
          Value: cs
        - Key: Env
          Value: !Ref Venue
        - Key: Stack
          Value: Unity Management Console
        - Key: Unique ID
          Value: !Sub "${RandomStringResource.RandomString}"
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          sudo apt-get -y -o DPkg::Lock::Timeout=-1 update
          sudo apt-get -y -o DPkg::Lock::Timeout=-1 install python3-pip
          mkdir -p /opt/aws/
          sudo pip3 install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          sudo ln -s /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /usr/local/bin/cfn-init -v --stack ${AWS::StackId} --resource DeployerInstance --configsets deployer_install --region ${AWS::Region}
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource DeployerInstance --region ${AWS::Region}

  DeployerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for unity-deployer-instance
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
        - CidrIp: 0.0.0.0/0
          FromPort: 8080
          IpProtocol: tcp
          ToPort: 8080
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"

Outputs:
  ManagementConsoleURL:
    Description: The URL for the Unity Management Console
    Value: !Sub "http://${DeployerInstance.PublicDnsName}:8080/ui/landing"
