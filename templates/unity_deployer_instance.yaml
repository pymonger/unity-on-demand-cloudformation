AWSTemplateFormatVersion: "2010-09-09"

Description: Deploy an EC2 instance into an existing VPC for deployment of Unity

Metadata:
  QuickStartDocumentation:
    EntrypointName: Launch into an existing VPC

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Basic configuration
        Parameters:
          - VPCID
          - PrivateSubnetID
          - KeyPairName
          - InstanceType
          - PrivilegedPolicyName
    ParameterLabels:
      VPCID:
        default: VPC ID
      PrivateSubnetID:
        default: Private subnet ID
      KeyPairName:
        default: SSH key name
      InstanceType:
        default: EC2 instance type
      PrivilegedPolicyName:
        default: Privileged (admin-level) IAM policy name

Parameters:
  VPCID:
    Description: ID of your existing VPC (e.g., vpc-0343606e).
    Type: AWS::EC2::VPC::Id

  PrivateSubnetID:
    Description: ID of the private subnet in an Availability Zone of your existing VPC (e.g., subnet-fe9a8b32).
    Type: AWS::EC2::Subnet::Id

  KeyPairName:
    Description: Name of an existing key pair, which allows you to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
      - c3.xlarge
      - c4.xlarge
      - c5.xlarge
      - c6i.xlarge
    Default: c6i.xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  PrivilegedPolicyName:
    Description: Name of an existing IAM policy which allows privileged access to AWS services.
    Type: String
    Default: mcp-tenantOperator-AMI-APIG

Mappings:
  AWSRegion2AMI:
    us-east-1:
      HVM64: ami-06e19b474320acfa8
    us-east-2:
      HVM64: ami-0a847dcd32f366120
    us-west-1:
      HVM64: ami-0b7451f34d8d9447a
    us-west-2:
      HVM64: ami-0f03d969d430caf73

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        # TODO: need to generalize for JPL, MCP and normal AWS accounts; currently these are specific to MCP
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/DatalakeKinesisPolicy"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/McpToolsAccessPolicy"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  DeployerInstance:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deployer_install:
            - install_cfn
            - install_deployer_tools
            - create_eks_cluster
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack= ${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: "000400"
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DeployerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DeployerInstance --configsets deployer_install --url https://stackbuilder.amazonaws.com
              group: root
              mode: "000400"
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_deployer_tools:
          packages:
            yum:
              docker: []
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
          commands:
            01_install_eksctl:
              command: !Sub |
                set -ex \
                && echo "running 01_install_eksctl" \
                && curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp \
                && mv /tmp/eksctl /usr/local/bin
              test: !Sub |
                $(eksctl version >/dev/null 2>&1 </dev/null); (( $? != 0 ))
            02_install_kubectl:
              command: !Sub |
                set -ex \
                && echo "running 02_install_kubectl" \
                && curl --silent -o /tmp/kubectl https://s3.${AWS::Region}.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl \
                && mv /tmp/kubectl /usr/local/bin \
                && chmod +x /usr/local/bin/kubectl
              test: !Sub |
                $(kubectl version --client >/dev/null 2>&1 </dev/null); (( $? != 0 ))
            03_docker_for_ec2_user:
              command: !Sub |
                set -ex \
                && echo "running 03_docker_for_ec2_user" \
                && usermod -a -G docker ec2-user
        create_eks_cluster:
          files:
            /home/ec2-user/eksctl-config.yaml:
              content: !Sub |
                apiVersion: eksctl.io/v1alpha5
                kind: ClusterConfig
                
                iam:
                  serviceRoleARN:
                  serviceRolePermissionsBoundary: arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}
                  withOIDC: false
                
                metadata:
                  name: unity-sps-on-demand
                  region: ${AWS::Region}
                  version: "1.23"
                  tags:
                    service: "MAAP-HEC"
                    project: "MAAP-HEC"
                
                vpc:
                  subnets:
                    private:
                      us-west-2b: { id: subnet-01dd01ca997ebc233 }
                      us-west-2a: { id: subnet-0379747e5833aa2c5 }
                    public:
                      us-west-2b: { id: subnet-047ca90901d826d96 }
                      us-west-2a: { id: subnet-0bb48585d511aaf74 }
                  securityGroup:
                  sharedNodeSecurityGroup:
                  manageSharedNodeSecurityGroupRules: true
                
                managedNodeGroups:
                  - name: defaultgroupNodeGroup
                    minSize: 1
                    maxSize: 2
                    desiredCapacity: 1
                    instanceType: m6i.xlarge
                    ami: ami-0886544fa915698f0
                    spot: true
                    tags:
                      service: "MAAP-HEC"
                      project: "MAAP-HEC"
                    iam:
                      attachPolicyARNs:
                        - arn:aws:iam::${AWS::AccountId}:policy/DatalakeKinesisPolicy
                        - arn:aws:iam::${AWS::AccountId}:policy/McpToolsAccessPolicy
                        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
                        - arn:aws:iam::aws:policy/AmazonS3FullAccess
                        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
                        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
                        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
                        - arn:aws:iam::aws:policy/AmazonSSMFullAccess
                        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy
                      instanceRoleARN:
                      instanceRolePermissionsBoundary: arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}
                      withAddonPolicies:
                        autoScaler: true
                    privateNetworking: true
                    overrideBootstrapCommand: |
                      #!/bin/bash
                      /etc/eks/bootstrap.sh unity-sps-on-demand
              group: ec2-user
              mode: '000644'
              owner: ec2-user
          commands:
            01_create_cluster:
              command: !Sub |
                set -ex \
                && echo "running 01_create_cluster" \
                && eksctl create cluster -f eksctl-config.yaml
              cwd: /home/ec2-user
    Properties:
      ImageId: !FindInMap [AWSRegion2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PrivateSubnetID
      EbsOptimized: true
      SecurityGroupIds:
        - !Ref DeployerSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: unity-deployer-instance
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource DeployerInstance --configsets deployer_install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource DeployerInstance --region ${AWS::Region}

  DeployerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for unity-deployer-instance
      GroupName: unity-deployer-instance-sg
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
