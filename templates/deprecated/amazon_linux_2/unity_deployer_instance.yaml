AWSTemplateFormatVersion: "2010-09-09"

Description: Deploy an EC2 instance into an existing VPC for deployment of Unity

Metadata:
  QuickStartDocumentation:
    EntrypointName: Launch into an existing VPC

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Basic configuration
        Parameters:
          - VPCID
          - PublicSubnetID
          - KeyPairName
          - InstanceType
          - PrivilegedPolicyName
    ParameterLabels:
      VPCID:
        default: VPC ID
      PublicSubnetID:
        default: Public subnet ID
      KeyPairName:
        default: SSH key name
      InstanceType:
        default: EC2 instance type
      PrivilegedPolicyName:
        default: Privileged (admin-level) IAM policy name

Parameters:
  VPCID:
    Description: ID of your existing VPC (e.g., vpc-0343606e).
    Type: AWS::EC2::VPC::Id

  PublicSubnetID:
    Description: ID of the public subnet in an Availability Zone of your existing VPC (e.g., subnet-fe9a8b32).
    Type: AWS::EC2::Subnet::Id

  KeyPairName:
    Description: Name of an existing key pair, which allows you to securely connect to your instance after it launches.
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: EC2 instance type
    Type: String
    AllowedValues:
      - c3.xlarge
      - c4.xlarge
      - c5.xlarge
      - c6i.xlarge
    Default: c6i.xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  PrivilegedPolicyName:
    Description: Name of an existing IAM policy which allows privileged access to AWS services.
    Type: String
    Default: mcp-tenantOperator-AMI-APIG

Mappings:
  AWSRegion2AMI:
    us-east-1:
      HVM64: ami-06e19b474320acfa8
    us-east-2:
      HVM64: ami-0a847dcd32f366120
    us-west-1:
      HVM64: ami-0b7451f34d8d9447a
    us-west-2:
      HVM64: ami-0f03d969d430caf73

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        # TODO: need to generalize for JPL, MCP and normal AWS accounts; currently these are specific to MCP
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/DatalakeKinesisPolicy"
        - !Sub "arn:aws:iam::${AWS::AccountId}:policy/McpToolsAccessPolicy"
      PermissionsBoundary: !Sub "arn:aws:iam::${AWS::AccountId}:policy/${PrivilegedPolicyName}"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  DeployerInstance:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT60M
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          deployer_install:
            - install_cfn
            - install_deployer_tools
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              group: root
              mode: "000400"
              owner: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.DeployerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource DeployerInstance --configsets deployer_install --url https://stackbuilder.amazonaws.com
              group: root
              mode: "000400"
              owner: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_deployer_tools:
          files:
            /home/ec2-user/.bash_profile:
              content: !Sub |
                # .bash_profile
                
                # Get the aliases and functions
                if [ -f ~/.bashrc ]; then
                        . ~/.bashrc
                fi
                
                # User specific environment and startup programs
                
                PATH=$HOME/.local/bin:$HOME/bin:/usr/local/bin:$PATH
                
                export PATH
              group: ec2-user
              mode: "000644"
              owner: ec2-user
          packages:
            yum:
              docker: []
              git: []
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
          commands:
            01_install_eksctl:
              command: !Sub |
                set -ex \
                && echo "running 01_install_eksctl" \
                && curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp \
                && mv /tmp/eksctl /usr/local/bin \
                && chmod +x /usr/local/bin/eksctl \
                && ln -s /usr/local/bin/eksctl /bin/eksctl
              test: !Sub |
                $(eksctl version >/dev/null 2>&1 </dev/null); (( $? != 0 ))
            02_install_kubectl:
              # TODO: install the version of kubectl that matches the k8s server version specified above
              command: !Sub |
                set -ex \
                && echo "running 02_install_kubectl" \
                && curl --silent -o /tmp/kubectl https://s3.${AWS::Region}.amazonaws.com/amazon-eks/1.24.7/2022-10-31/bin/linux/amd64/kubectl \
                && mv /tmp/kubectl /usr/local/bin \
                && chmod +x /usr/local/bin/kubectl \
                && ln -s /usr/local/bin/kubectl /bin/kubectl
              test: !Sub |
                $(kubectl version --client >/dev/null 2>&1 </dev/null); (( $? != 0 ))
            03_docker_for_ec2_user:
              command: !Sub |
                set -ex \
                && echo "running 03_docker_for_ec2_user" \
                && usermod -a -G docker ec2-user
            04_install_tfenv:
              command: !Sub |
                set -ex \
                && echo "running 04_install_tfenv" \
                && git clone --depth=1 https://github.com/tfutils/tfenv.git /home/ec2-user/.tfenv \
                && chown -R ec2-user:ec2-user /home/ec2-user/.tfenv \
                && ln -s /home/ec2-user/.tfenv/bin/* /usr/local/bin
            05_remove_outdated_awscli:
              command: !Sub |
                set -ex \
                && echo "running 06_remove_outdated_awscli" \
                && yum remove awscli -y \
                && ln -s /usr/local/bin/aws /bin/aws
            06_install_conda:
              command: !Sub |
                set -ex \
                && echo "running 06_install_conda" \
                && curl -sSL https://repo.anaconda.com/miniconda/Miniconda3-py39_22.11.1-1-Linux-x86_64.sh -o /tmp/install_miniconda.sh \
                && chmod 755 /tmp/install_miniconda.sh \
                && /tmp/install_miniconda.sh -b -p /usr/local -u
            07_install_serverless:
              command: !Sub |
                set -ex \
                && echo "running 07_install_serverless" \
                && curl -sSL https://nodejs.org/dist/v16.20.0/node-v16.20.0-linux-x64.tar.gz -o /tmp/node-v16.20.0-linux-x64.tar.gz \
                && tar xvfz /tmp/node-v16.20.0-linux-x64.tar.gz -C /usr/local \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/node /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/corepack /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/npx /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/npm /usr/local/bin/ \
                && npm install -g serverless \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/serverless /usr/local/bin/ \
                && ln -sf /usr/local/node-v16.20.0-linux-x64/bin/sls /usr/local/bin/
    Properties:
      ImageId: !FindInMap [AWSRegion2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      SubnetId: !Ref PublicSubnetID
      EbsOptimized: true
      SecurityGroupIds:
        - !Ref DeployerSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      Tags:
        - Key: Name
          Value: unity-deployer-instance
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource DeployerInstance --configsets deployer_install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource DeployerInstance --region ${AWS::Region}

  DeployerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for unity-deployer-instance
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: "-1"
